
void* netFuncCli(void* ctlhandle){
	int plidx;
	int *ctlh = (int *)ctlhandle;
	char cliIdx = ctlh[1] >> 8 & 0xFF;
	ctlh[1] = 0;
	printf("client %d connected\n",cliIdx);
				
	//inet_ntop(AF_INET,&client.sin_addr.s_addr,buffer[cliIdx],1024);
	//printf("addr: %s\nport: %d\nfd: %d\n",buffer,ntohs(client.sin_port),clifd);


	//setsockopt(clifd,SOL_SOCKET,SOCK_NONBLOCK,&optval,sizeof(optval));
	int ff = fcntl(ctlh[0],F_GETFL);
	//printf("fdl:%x\n",ff);
	fcntl(ctlh[0],F_SETFL,ff | O_NONBLOCK);
	//usleep(2000);

		
	while(netalife){
		int lenrd = read(ctlh[0],buffer[cliIdx],1024);
		randFtag = micros();
		if(lenrd == -1 && errno == EWOULDBLOCK)continue;
		if(lenrd == 0)break;
		if(lenrd == -1)break;
		buffer[cliIdx][lenrd] = 0;
		int lenwr = 0;
		printf("============\n%s=============\n%d\n",buffer[cliIdx],lenrd);
		//printf("=============\n%d\n",lenrd);
		switch (buffer[cliIdx][0])
		{
		case 'G':
			if(buffer[cliIdx][4]=='/'){
				if(buffer[cliIdx][5]==' '){
					//transfer index
					//printf("OPEN <index.html>\n");
					int lol = open("index.html",O_RDONLY);

					if(lol > 0){
						//transfer FILE if can open
						stat("index.html", &st);
						int fsize = st.st_size;
						int hsize = sprintf(headerBuffer[cliIdx],respond_root,fsize,randFtag);
						lenwr = send(ctlh[0],headerBuffer,hsize,0);
						char c;
						for(int i = 0;i<fsize;i++){
							read(lol,&c,1);
							lenwr += send(ctlh[0],&c,1,0);
						}

					} else {
						//transfer 404
						lenwr = send(ctlh[0],respond_404,146,0);
					}
						
					close(lol);
					/*
					
					
					lenwr = send(clifd,respond_root,260,0);
					lenwr += send(clifd,html,528,0);
					*/
	
				} else if(buffer[cliIdx][5]=='Z'){
					//transfer frame
					//try to hold Main thread to read img
					ctlh[1] = 0x01;

					//extract quality num
					int idxh = 4;
					while(buffer[cliIdx][idxh] != ' '){
						idxh++;
					}
					buffer[cliIdx][idxh] = 0;
					

					//printf("OPEN <frame>\n");
					idxh = 6;
					while(buffer[cliIdx][idxh] != 'X')idxh++;
					idxh++;
					compqval[1] = c_str2u_int(buffer[cliIdx]+idxh,4);
					//printf("quality:%d\n",compqval[1]);
					
					while(!syncHandler)usleep(100);
					//printf("Main thread held\n");
					int fsize = jpg.size();
					int hsize = sprintf(headerBuffer[cliIdx],respond_lol,fsize,randFtag);
					lenwr = send(ctlh[0],headerBuffer[cliIdx],hsize,0);

					unsigned char *c = jpg.data();
					for(int i = 0;i<fsize;i++){
						
						lenwr += send(ctlh[0],c+i,1,0);
					}

					//release held main thread
					ctlh[1] = 0;

				} else {
					//transfer <FILE>
					int idxh = 4;
					while(buffer[cliIdx][idxh] != ' '){
						idxh++;
					}
					buffer[cliIdx][idxh] = 0;
					printf("OPEN <%s>\n",buffer[cliIdx]+5);
					int lol = open(buffer[cliIdx]+5,O_RDONLY);
					if(lol > 0){
						//transfer FILE if can open
						stat(buffer[cliIdx]+5, &st);
						int fsize = st.st_size;
						int hsize = sprintf(headerBuffer[cliIdx],respond_lol,fsize,randFtag);
						//printf("filesize:%d\n",fsize);
						lenwr = send(ctlh[0],headerBuffer[cliIdx],hsize,0);
						char c;
						for(int i = 0;i<fsize;i++){
							read(lol,&c,1);
							lenwr += send(ctlh[0],&c,1,0);
						}

						

					} else {
						//transfer 404
						lenwr = send(ctlh[0],respond_404,146,0);
					}
						
					close(lol);
				}
			}
			break;

		case 'P':
			//printf("post\n");
			lenwr = send(ctlh[0],respond_POST,139,0);

			//post payload start with a # so go to index to the first # occurance in buffer[]
			plidx = 0;
			while(buffer[cliIdx][plidx] != '#' && (plidx < 1024)){
				plidx++;
			}
			

			//ctlh[1];
			switch (buffer[cliIdx][plidx + 1])
			{
			case 'A':
				if(buffer[cliIdx][plidx + 4] == 't'){
					//printf("acon\n");
					//system("/home/omeg/Desktop/cpp/camPlatctl/platctl /dev/ttyUSB0 -s1");
					ctlh[1] = 0x4;
				} else {
					//printf("acoff\n");
					//system("/home/omeg/Desktop/cpp/camPlatctl/platctl /dev/ttyUSB0 -s0");
					ctlh[1] = 0x2;
				}
				while(ctlh[1] & 0xE);
				printf("HWREQ DONE\n");
			break;
			
			case 'P':
				switch (buffer[cliIdx][plidx + 4])
				{
				case 'w':
					//system("/home/omeg/Desktop/cpp/camPlatctl/platctl /dev/ttyUSB0 -sw");
					ctlh[1] = 0x6;
					break;
				
				case 's':
					//system("/home/omeg/Desktop/cpp/camPlatctl/platctl /dev/ttyUSB0 -ss");
					ctlh[1] = 0x8;
					break;
				
				case 'a':
					//system("/home/omeg/Desktop/cpp/camPlatctl/platctl /dev/ttyUSB0 -sa");
					ctlh[1] = 0xA;
					
					break;
				
				case 'd':
					//system("/home/omeg/Desktop/cpp/camPlatctl/platctl /dev/ttyUSB0 -sd");
					ctlh[1] = 0xC;
					
					break;
				
				case 'l':
					//system("/home/omeg/Desktop/cpp/camPlatctl/platctl /dev/ttyUSB0 -sl");
					ctlh[1] = 0xE;
					break;
				
				default:
					break;
				}
				while(ctlh[1] & 0xE);
				printf("HWREQ DONE\n");
			break;
			default:
				break;
			}
			ctlh[1] = 0;
		break;
		default:
			break;
		}
	printf("total Written: %d bytes\n",lenwr);

				
	}
	close(ctlh[0]);
	printf("client %d quit\n",cliIdx);
	ctlh[0] = 0;
	//ff = fcntl(serfd,F_GETFL);
	////printf("fdlend:%x\n",ff);
	//fcntl(serfd,F_SETFL,ff & ~O_NONBLOCK);
	//usleep(100000);


}
